<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
        gBgAAICXAACAlQAAgBYAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
        gAAAAIAaAACAmAAAgPoAAID4AACAlgAAgBsAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAIAAAACAJgAAgKwAAID7AACA/wAAgP8AAID7AACAqQAAgCMAAIAAAACAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIAAAACAAAAAgCsAAIC1AACA/gAAgP8AAID/AACA/wAAgP8AAID+AACAsgAAgCwAAIAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAAAAgAAAAIA6AACAwQAAgP0AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID+AACAwAAA
        gDcAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAAIAAAACANQAAgL8AAIDzAACA8gAAgPcAAID/AACA/wAAgP8AAID/AACA+AAA
        gPIAAIDzAACAvgAAgDUAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAvAACAUwAAgFMAAIBPAACAngAAgP4AAID/AACA/wAA
        gP8AAICnAACATwAAgFMAAIBTAACALwAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIBvAACA/QAA
        gP8AAID/AACA/wAAgH0AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
        gG8AAID9AACA/wAAgP8AAID/AACAfQAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAEAAIABAACAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAgDAAAIAsAACAAAAAAAAAAAAAAAAAAAAA
        AAAAAIAAAACAbwAAgP0AAID/AACA/wAAgP8AAIB9AACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAMQAA
        gDgAAIABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIA1AACAuwAAgFMAAIAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAAIBvAACA/QAAgP8AAID/AACA/wAAgH0AAIAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAIBRAACAxAAAgD0AAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAKgAAgL4AAIDyAACAUwAA
        gAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgG8AAID9AACA/wAAgP8AAID/AACAfQAAgAAAAAAAAAAAAAAA
        AAAAAAAAAACAAAAAgFEAAIDwAACAxAAAgDEAAIAAAACAAAAAAAAAAIAAAACAAAAAgCEAAICxAACA/wAA
        gPIAAIBTAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAbwAAgP0AAID/AACA/wAAgP8AAIB9AACAAAAA
        AAAAAAAAAAAAAAAAAAAAAIAAAACAUAAAgPAAAID/AACAvwAAgCkAAIAAAACAAAAAgAAAAIAaAACApQAA
        gP4AAID/AACA+AAAgJ8AAIBtAACAcAAAgHAAAIBwAACAcAAAgG0AAICuAACA/gAAgP8AAID/AACA/wAA
        gLYAAIBsAACAcAAAgHAAAIBwAACAcAAAgG0AAICdAACA9gAAgP8AAID/AACArAAAgB0AAIAAAACAFgAA
        gJUAAID6AACA/wAAgP8AAID/AACA/gAAgP4AAID+AACA/gAAgP4AAID+AACA/gAAgP4AAID/AACA/wAA
        gP8AAID/AACA/gAAgP4AAID+AACA/gAAgP4AAID+AACA/gAAgP4AAID/AACA/wAAgP8AAID7AACAnwAA
        gBwAAICWAACA9gAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAA
        gP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAA
        gP8AAID5AACAnQAAgJcAAID3AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAA
        gP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/wAA
        gP8AAID/AACA/wAAgPkAAICdAACAFwAAgJgAAID7AACA/wAAgP8AAID/AACA/gAAgP4AAID+AACA/gAA
        gP4AAID+AACA/gAAgP4AAID/AACA/wAAgP8AAID/AACA/gAAgP4AAID+AACA/gAAgP4AAID+AACA/gAA
        gP4AAID/AACA/wAAgP8AAID7AACAoQAAgB0AAIAAAACAGwAAgKgAAID/AACA/wAAgPgAAICfAACAbQAA
        gHAAAIBwAACAcAAAgHAAAIBtAACArgAAgP4AAID/AACA/wAAgP8AAIC2AACAbAAAgHAAAIBwAACAcAAA
        gHAAAIBtAACAnQAAgPYAAID/AACA/wAAgK4AAIAeAACAAAAAgAAAAIAAAACAJAAAgLUAAID/AACA8gAA
        gFMAAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIBvAACA/QAAgP8AAID/AACA/wAAgH0AAIAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAAIBQAACA8AAAgP8AAIDBAACAKwAAgAAAAIAAAAAAAAAAgAAAAIAAAACALAAA
        gMAAAIDyAACAUwAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgG8AAID9AACA/wAAgP8AAID/AACAfQAA
        gAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgFEAAIDwAACAxgAAgDIAAIAAAACAAAAAAAAAAAAAAAAAAAAA
        AAAAAIAAAACANwAAgL4AAIBTAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAbwAAgP0AAID/AACA/wAA
        gP8AAIB9AACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAUQAAgMUAAIA/AACAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAAIAAAACAMgAAgC4AAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIBvAACA/QAA
        gP8AAID/AACA/wAAgH0AAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAxAACAPAAAgAEAAIAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
        gG8AAID9AACA/wAAgP8AAID/AACAfQAAgAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAEAAIABAACAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIAAAACAbwAAgP0AAID/AACA/wAAgP8AAIB9AACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAA
        gC4AAIBTAACAUwAAgE8AAICeAACA/gAAgP8AAID/AACA/wAAgKcAAIBPAACAUwAAgFQAAIAyAACAAQAA
        gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        gAAAAIAAAACAMgAAgL0AAIDzAACA8gAAgPcAAID/AACA/wAAgP8AAID/AACA+AAAgPIAAIDzAACAwwAA
        gDgAAIABAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAgAAAAIAAAACANwAAgL0AAID9AACA/wAAgP8AAID/AACA/wAAgP8AAID/AACA/gAA
        gMQAAIA6AACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAJwAAgK8AAID+AACA/wAAgP8AAID/AACA/wAA
        gP4AAIC0AACALwAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAIgAAgKYAAID6AACA/wAA
        gP8AAID7AACArAAAgCQAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAGAAA
        gJEAAID4AACA+AAAgJkAAIAdAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAIAAAACAFQAAgJgAAICdAACAGAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//w////4H///8A///+AH///AA///gAH//4AB///4H///+B+f+fgfj/H4
        H4/h+B+Hwfgfg4AAAAEAAAAAAAAAAAAAAAAAAAAAgAAAAcH4H4Ph+B+H8fgfj/n4H4//+B+f//gf//+A
        AP//gAD//8AD///gB///8A////gf///8P/8=
</value>
  </data>
</root>