using CustomComponents;
using System;
using System.Windows.Forms;
using System.Reflection;
using System.Resources;
using DLLs;

namespace DiscordAudioStream
{
	static class Program
	{
		[STAThread]
		static void Main(string[] args)
		{
			Logger.Log("Started Main method. Arguments: [{0}] (size={1})", string.Join(",", args), args.Length);
			Logger.Log("OS Version: {0}", Environment.OSVersion);
			Logger.Log("Log ID: {0}", new DateTimeOffset(DateTime.UtcNow).ToUnixTimeSeconds());
			Logger.Log("Build ID: " + BuildId.Id);

			AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);
			User32.SetProcessDpiAwarenessContext(User32.DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);

			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);

			Application.ThreadException += ApplicationThreadException;
			// Set the unhandled exception mode to force all Windows Forms errors to go through our handler.
			Application.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);
			AppDomain.CurrentDomain.UnhandledException += CurrentDomainUnhandledException;



			bool darkMode;
			int theme = Properties.Settings.Default.Theme;
			if (theme == 0)
			{
				darkMode = DarkThemeManager.IsDarkTheme();
			}
			else if (theme == 1)
			{
				darkMode = false;
			}
			else
			{
				darkMode = true;
			}

			if (darkMode)
			{
				Uxtheme.AllowDarkModeForApp(true);
			}

			MainForm mainForm = new MainForm(darkMode);
			Application.Run(mainForm);
		}


		// Load .dll files that have been embedded in the executable

		private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
		{
			string dllName = args.Name.Contains(",") ? args.Name.Substring(0, args.Name.IndexOf(',')) : args.Name.Replace(".dll", "");
			dllName = dllName.Replace(".", "_");

			if (dllName.EndsWith("_resources")) return null;

			Logger.Log("Loading assembly: {0}", dllName);

			ResourceManager rm = new ResourceManager(MethodBase.GetCurrentMethod().DeclaringType.Namespace + ".Properties.Resources", Assembly.GetExecutingAssembly());

			byte[] bytes = (byte[])rm.GetObject(dllName);

			return Assembly.Load(bytes);
		}


		// Print stack trace in case of unhandled exception 

		private static void CurrentDomainUnhandledException(object sender, UnhandledExceptionEventArgs e)
		{
			HandleException(e.ExceptionObject as Exception);
		}
		private static void ApplicationThreadException(object sender, System.Threading.ThreadExceptionEventArgs e)
		{
			HandleException(e.Exception);
		}
		private static void HandleException(Exception exception)
		{
			Logger.Log("Unhandled exception caught, outputting stack trace...");

			// Write the stack trace in a file
			const string TRACE_FILE_NAME = "DiscordAudioStream_stack_trace.txt";
			string tracePath = System.IO.Path.GetFullPath(TRACE_FILE_NAME);

			Logger.Log("  Trace path is: {0}", tracePath);

			string[] lines = new string[] { exception.ToString() };
			System.IO.File.WriteAllLines(tracePath, lines);

			Logger.Log("  Stack trace written successfully.", tracePath);

			// Show warning popup
			string msg = "Unhandled exception: " + exception.Message + "\n";
			msg += "Check the autogenerated trace file:\n";
			msg += tracePath;
			MessageBox.Show(msg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

			// Open trace file
			System.Diagnostics.Process.Start(tracePath);
		}
	}
}
